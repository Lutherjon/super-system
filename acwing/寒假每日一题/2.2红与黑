有一间长方形的房子，地上铺了红色、黑色两种颜色的正方形瓷砖。

你站在其中一块黑色的瓷砖上，只能向相邻（上下左右四个方向）的黑色瓷砖移动。

请写一个程序，计算你总共能够到达多少块黑色的瓷砖。

输入格式
输入包括多个数据集合。

每个数据集合的第一行是两个整数 W 和 H，分别表示 x 方向和 y 方向瓷砖的数量。

在接下来的 H 行中，每行包括 W 个字符。每个字符表示一块瓷砖的颜色，规则如下

1）‘.’：黑色的瓷砖；
2）‘#’：红色的瓷砖；
3）‘@’：黑色的瓷砖，并且你站在这块瓷砖上。该字符在每个数据集合中唯一出现一次。

当在一行中读入的是两个零时，表示输入结束。

输出格式
对每个数据集合，分别输出一行，显示你从初始位置出发能到达的瓷砖数(记数时包括初始位置的瓷砖)。

数据范围
1≤W,H≤20
输入样例：
6 9 
....#. 
.....# 
...... 
...... 
...... 
...... 
...... 
#@...# 
.#..#. 
0 0
输出样例：
45

#include<iostream>
using namespace std;
char ai[30][30];
int ans;
int n, m;
int dx[4] = { 0,1,0,-1 };
int dy[4] = { 1,0,-1,0 };
void dfs(int x,int y)
{
    ai[x][y]='#';
    ans++;
    for(int i=0;i<4;i++)
    {
        int a=x+dx[i];int b=y+dy[i];//注意不能是a+=dx[i];
        if(a<0 || a>=n || b<0 || b>=m || ai[a][b]=='#') continue;
        dfs(a,b);
    }
}
int main()
{

    while ( cin >> m >> n,m || n)
    {
        ans=0;
        for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
             cin >> ai[i][j];

        int x=0, y=0;
        bool flag = 1;

        for(int i=0;i<n;i++)
    {
    for(int j=0;j<m;j++)
    if(ai[i][j]=='@')
    {x=i;y=j;flag=0;break;}
    if(!flag)
    break;
    }
        dfs(x, y);
        cout << ans<<endl;
    }
}

作者：带着点诗意走吧
链接：https://www.acwing.com/activity/content/code/content/4733395/
来源：AcWing
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
