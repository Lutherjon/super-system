778. 字符串最大跨距

有三个字符串 S,S1,S2，其中，S 长度不超过 300，S1 和 S2 的长度不超过 10。

现在，我们想要检测 S1 和 S2 是否同时在 S 中出现，且 S1 位于 S2 的左边，并在 S 中互不交叉（即，S1 的右边界点在 S2 的左边界点的左侧）。

计算满足上述条件的最大跨距（即，最大间隔距离：最右边的 S2 的起始点与最左边的 S1 的终止点之间的字符数目）。

如果没有满足条件的 S1，S2 存在，则输出 −1。

例如，S= abcd123ab888efghij45ef67kl, S1= ab, S2= ef，其中，S1 在 S 中出现了 2 次，S2 也在 S 中出现了 2 次，最大跨距为：18。

输入格式
输入共一行，包含三个字符串 S,S1,S2，字符串之间用逗号隔开。

数据保证三个字符串中不含空格和逗号。

输出格式
输出一个整数，表示最大跨距。

如果没有满足条件的 S1 和 S2 存在，则输出 −1。

输入样例：
abcd123ab888efghij45ef67kl,ab,ef
输出样例：
18

#include<iostream>
using namespace std;
void Cin(string a,char t)
{
    while(cin>>t)
    {
        if(t==',')
        break;
        a+=t;
    }
}
int Left(string a,string b)
{
    for(int i=0;i<a.size();i++)
    {
        bool flag=0;
        if(a[i]==b[0])
       {
        for(int j=0;j<b.size();j++)
        {
            if(a[i+j]!=b[j])
            {flag=1;break;}
        }
        if(!flag)
        return i+b.size()-1;
       }
    }
    return -1;
}
int Right(string a,string b,int left )
{
    /*string c;
    for(int i=b.size();i>=0;i--)
    c.push_back(b[i]);*/

    for(int i=a.size()-1;i>=0&&i>=left;i--)
{
        bool flag=0;
        if(a[i]==b[b.size()-1])//从后向前查找
    {
            for(int j=b.size()-1,k=0;j>=0;j--,k++)//倒叙比较
        {
            if(a[i-k]!=b[j])
            {
                flag=1;break;
            }
        }
        if(!flag&&i-b.size()+1>=left)//防止s1,s2重合
        return i-b.size()+1;
            
    }
}
    return -1;
}
int main()
{
    string a,b,c;
    char t;
    int i=0;
    while(cin>>t)//以‘，’为分割线输入三个字符串
    {
        if(t!=',')
        {
            if(i==0)
            a+=t;
            else if(i==1)
            b+=t;
            else 
            c+=t;
        }
        else
        i++;
    }
    //cout<<a<<endl<<b<<endl<<c;
    int left=Left(a,b);//求左字符串的右端下标
    int right=Right(a,c,left);//求右字符串的左端下标
    //cout<<left<<endl<<right<<endl;
    if(right==-1||left==-1)
    cout<<-1;
    else 
    cout<<right-left-1<<endl;//求中间的数而非差值
}
