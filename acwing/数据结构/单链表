实现一个单链表，链表初始为空，支持三种操作：

向链表头插入一个数；
删除第 k 个插入的数后面的数；
在第 k 个插入的数后插入一个数。
现在要对该链表进行 M 次操作，进行完所有操作后，从头到尾输出整个链表。

注意:题目中第 k 个插入的数并不是指当前链表的第 k 个数。例如操作过程中一共插入了 n 个数，则按照插入的时间顺序，这 n 个数依次为：第 1 个插入的数，第 2 个插入的数，…第 n 个插入的数。

输入格式
第一行包含整数 M，表示操作次数。

接下来 M 行，每行包含一个操作命令，操作命令可能为以下几种：

H x，表示向链表头插入一个数 x。
D k，表示删除第 k 个插入的数后面的数（当 k 为 0 时，表示删除头结点）。
I k x，表示在第 k 个插入的数后面插入一个数 x（此操作中 k 均大于 0）。
输出格式
共一行，将整个链表从头到尾输出。

数据范围
1≤M≤100000
所有操作保证合法。

输入样例：
10
H 9
I 1 1
D 1
D 0
H 6
I 3 6
I 4 5
I 4 5
I 3 4
D 6
输出样例：
6 4 6 5
#include<iostream>//链表有插入的操作，避免了数组插入时要移位的问题
using namespace std;

const int N = 100010;
int  head, e[N], ne[N], idx;

void init()
{
	head = -1;//指向-1，因为数组下标只有0--N;
	idx = 1;//第1个元素：element;
}
void add_to_head(int x)
{
	e[idx] = x;
	ne[idx] = head;//指针指向头节点指向的值，而非指向头节点；也解释了链表只能插到后面的原因
	head = idx;//下标
	idx++;//指向下一个
}
void insert(int k, int x)
{
	
	e[idx] = x;
	ne[idx] = ne[k];//指向k结点指向的值
	ne[k] = idx;//k节点指向  idx：下标
	idx++;
}
void remove(int k)//删除k后的节点，间隔一个指向
{
	ne[k] = ne[ne[k]];//ne[k]是下一个下标，ne[ne[k]]就是……
}
int main()
{
    int n;
    cin >> n;
    init();
    while (n--)
    {
        char op;
        cin >> op;
        if (op == 'I')
        {
            int k, x;
            cin >> k >> x;
            insert(k, x);
        }
        else if (op == 'H')
        {
            int x;
            cin >> x;
            add_to_head(x);
        }
        else
        {
            int k;
            cin >> k;
            if (!k)
                head = ne[head];
            else
            {
                remove(k);
            }
        }
    }

    for (int i = head; i != -1; i = ne[i])cout << e[i] << " ";
    cout << endl;
}
