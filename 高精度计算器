#include<iostream>
#include<vector>
using namespace std;
vector<int >add(vector<int >A, vector<int >B)
{
	vector<int >C;
	int t = 0;
	for (int i = 0; i < A.size() || i < B.size(); i++)
	{
		if (i < A.size())t = A[i] + t;
		if (i < B.size())t += B[i];
		C.push_back(t % 10);
		t /= 10;
	}
	if (t)C.push_back(t);
	return C;
}
void Add(string a, string b)
{
	vector<int >A, B, C;
	for (int i = a.size() - 1; i >= 0; i--)
		A.push_back(a[i] - '0');
	for (int i = b.size() - 1; i >= 0; i--)
		B.push_back(b[i] - '0');
	C = add(A, B);
	for (int i = C.size() - 1; i >= 0; i--)
		cout << C[i];
}
bool cmp(vector<int >A, vector<int >B)
{
	if (A.size() != B.size())return A.size() > B.size();
	for (int i = A.size() - 1; i >= 0; i--)
		if (A[i] != B[i])
			return A[i] > B[i];
	return true;
}
vector<int >sub(vector<int >A, vector<int >B)
{
	vector<int >C;
	int t = 0;
	for (int i = 0; i < A.size(); i++)
	{
		t = A[i] - t;
		if (i < B.size())t -= B[i];
		C.push_back((t + 10) % 10);
		if (t < 0)t = 1;
		else t = 0;
	}
	while (C[C.size() - 1] == 0 && C.size() != 1)C.pop_back();
	return C;
}
void Sub(string a, string b)
{
	vector<int >A, B, C;
	for (int i = a.size() - 1; i >= 0; i--)
		A.push_back(a[i] - '0');
	for (int i = b.size() - 1; i >= 0; i--)
		B.push_back(b[i] - '0');
	if (!cmp(A, B))
	{
		cout << '-';
		C = sub(B, A);
		for (int i = C.size() - 1; i >= 0; i--)
			cout << C[i];
	}
	else {
		C = sub(A, B);
		for (int i = C.size() - 1; i >= 0; i--)
			cout << C[i];
	}
}
int my_pow(int a, int b)
{
	while (b--)
	{
		a *= 10;
	}
	return a;
}
vector<int >mul(vector<int >A, vector<int> B)
{
	vector<int >C;
	int t = 0, b = 0;
	for (int i = 0; i < B.size(); i++)
	{
		b += my_pow(B[i], i);
	}
	for (int i = 0; i < A.size(); i++)
	{
		t += A[i]*b;
		C.push_back(t % 10);
		t /= 10;
	}
	while (t)
	{
		C.push_back(t % 10);
		t /= 10;
	}
	return C;
}
void Mul(string a, string b)
{
	vector<int >A, B, C;
	for (int i = a.size() - 1; i >= 0; i--)
		A.push_back(a[i] - '0');
	for (int i = b.size() - 1; i >= 0; i--)
		B.push_back(b[i] - '0');
	C = mul(A, B);
	for (int i = C.size() - 1; i >= 0; i--)
		cout << C[i];
}
vector<int > div(vector<int >A, vector<int> B)
{
	vector<int >C;
	int t = 0, b = 0;
	for (int i = 0; i < B.size(); i++)
	{
		b += my_pow(B[i], i);
	}
	for (int i = A.size() - 1; i >= 0; i--)
	{
		t = A[i] + t * 10;
		if(t/b!=0||C.size()>=1)
		C.push_back(t / b);
		t %= b;
	}
	if(C.size()==0)
	C.push_back(0);
	if (t) 
	{
		C.push_back(-1);
		int n = 6;//保留n位小数
		while (t && n--)
		{
			t *= 10;
			C.push_back(t / b);
			t %= b;
		}
	}
	return C;
}
void Div(string a, string b)
{
	vector<int >A, B, C;
	for (int i = a.size() - 1; i >= 0; i--)
		A.push_back(a[i] - '0');
	for (int i = b.size() - 1; i >= 0; i--)
		B.push_back(b[i] - '0');
	C = div(A, B);
	for (int i = 0; i < C.size(); i++)
	{
		if (C[i] == -1)
			cout << '.';
		else
			cout << C[i];
	}
}
void calculation(string a, string b,char c)
{
	switch (c)
	{
	case '+':	Add(a, b);
		break;
	case '-':	Sub(a, b);
		break;	
	case '*':	Mul(a, b);
			break;
	case '/':	Div(a, b);
		break;
	default:
		printf("请重输\n");
		break;
	}
}
void fact(string a)
{
	vector<int >A, B, C,tmp;
	for (int i = a.size() - 1; i >= 0; i--)
	{
		tmp.push_back(a[i] - '0');
	}

	long long n = 0;
	for (int i = 0; i < tmp.size(); i++)
	{
		n += my_pow(tmp[i], i);
	}
	//cout << n;
	B.push_back(1);
	A.push_back(1);
	for (int i = 1; i <= n; i++)
	{
		B[0] = i;
		C = mul(A, B);
		for (int j = 0; j < A.size(); j++)
			A[j] = C[j];
		for (int j = A.size(); j < C.size(); j++)
			A.push_back(C[j]);
	}
	cout << a << "!= ";
	for (int i = A.size() - 1; i >= 0; i--)
		cout << A[i];
}
**************************************************************
int main()
{
	string a, b;
	char c;		
	printf("请输入:\n");
	while (1)
	{
		cin >> a >> c;
		if(c=='!')		
        fact(a);

		else
		{
			cin >> b;
			calculation(a, b, c);
		}
	}	
}

