#include <iostream>
#define ROWS 11
#define COLS 11
#define ROW 9
#define COL 9
#define easy_mine 10
void display(char board[ROWS][COLS], int row, int col)
{
    int i = 0;
    int j = 0;
    for (j = 0; j < col + 1; j++)
    {
        printf("  %d", j);
    }
    printf("\n");
    printf("\n");
    for (i = 1; i < row + 1; i++)
    {
        printf("  %d", i);
        for (j = 1; j < col + 1; j++)
        {
            printf("  %c", board[i][j]);
        }
        printf("\n");
        printf("\n");
    }
}
int count_mine(char mine[ROWS][COLS], int i, int j)
{
    int a = 0;
    int b = 0;
    int count = 0;
    for (a = i  - 1; a <= i  + 1; a++)
    {
        for (b = j - 1; b <= j  + 1; b++)
        {
            if(a> 0 && b > 0 && a < ROW + 1 && b < COL + 1)
            count =mine[a][b] - '0'+count;
        }
    }
    return count;
}
void expendboard(char mine[ROWS][COLS], char show[ROWS][COLS], int i, int j)
{
    int a = 0;
    int b = 0;
    int count = count_mine(mine, i, j);
    if (count == 0)
    {
        show[i][j] = ' ';       
        for (a = i - 1; a <= i + 1; a++)
        {
            for (b = j - 1; b <= j + 1; b++)
            {
                if (a >0 && b>0&&a<ROW+1&&b<COL+1 &&show[a][b]=='?'&&mine[a][b]!='1')
                    expendboard(mine, show, a, b);
            }
        }
    }
    else
    {
        show[i][j] = count + '0';   
        //for (a = i - 1; a <= i + 1; a++)
        //{
        //    for (b = j - 1; b <= j + 1; b++)
        //    {
        //        if (a != i && b != j && a > 0 && b > 0 && a < ROW + 1 && b < COL + 1 && show[a][b] == '?' && mine[a][b] != '1')
        //            expendboard(mine, show, a, b);
        //    }
        //}
    }
}
int search_mine(char mine[ROWS][COLS], char show[ROWS][COLS], int row, int col)
{
    int i = 0;
    int j = 0;
    int win = 0;
    int input = 0;
    int mark = 0;
    while (win <easy_mine)
    {
        printf("********************\n");
        printf("******* 1.标记 *****\n");
        printf("******* 2.查看 *****\n");
        printf("********************\n");
        printf("请选择:>");
        scanf_s("%d", &input);
        switch (input)
        {
        case 1:
            printf("选择要标记的地块坐标（再次标记后取消）:>");
            scanf_s("%d %d", &i, &j);
            if (show[i][j] == '?' && mark <= easy_mine)
            {
                show[i][j] = '*';
                mark++;
                if (mine[i][j] == '1')
                    win++;
                display(show, ROW, COL);
            }
            else if (mark > 10)
                printf("标记已满，请取消\n");
            else if (show[i][j] == '*')
            {
                show[i][j] = '?';
                mark--;
                if (mine[i][j] == '1')
                    win--;
                display(show, ROW, COL);
            }
            break;
        case 2:
            while (1)
            {
                printf("选择要查看的地块坐标:>");
                scanf_s("%d %d",& i, &j);
                if (show[i][j] == '?' && mine[i][j] == '0')
                {
                    expendboard(mine, show, i, j);
                    display(show, ROW, COL);
                    break;
                }
                else if (show[i][j] == '?' && mine[i][j] == '1')
                {
                    system("cls");
                    printf("很遗憾，你被炸死了\n");
                    printf("雷阵如下\n");
                    display(mine, ROW, COL);
                    break;
                }
                else if (show[i][j] = '?')
                    printf("坐标非法，请重输\n");
            }
            break;
        default:
            system("cls");
            display(show, ROW, COL);
            printf("输入非法，请重输\n");
            break;
        }
        if(mine[i][j]=='1'&&input==2)
        break;
        if (win == easy_mine)
        {
            system("cls");
            printf("排雷成功\n");
            break;
        }
    }
    return 1;
}
void setmine(char board[ROWS][COLS], int row, int col)
{
    int count = easy_mine;
    while(count>0)
    {
        again:
        int i = rand() % 9 + 1;
        int j = rand() % 9 + 1;
        if (board[i][j] == '0')
        {
            board[i][j] = '1';
        }
        else//如果没有else；if条件不满足；也会count--;
            goto again;
        count--;
    }
}
void initboard(char board[ROWS][COLS], int row, int col,char set)
{
    int i = 0;
    int j = 0;
    for (i = 0; i < row+2; i++)
    {
        for (j = 0; j < col+2; j++)
        {
            board[i][j] = set;
        }
    }
}
void game()
{
    char board1[ROWS][COLS] = { 0 };
        char board2[ROWS][COLS] = { 0 };
        initboard(board1, ROW, COL, '0');
        initboard(board2, ROW, COL, '?');
        display(board2, ROW, COL);   
        setmine(board1, ROW, COL);
       // display(board1, ROW, COL);//用于debug
        while (1)
        {           
            int p = search_mine(board1, board2, ROW, COL);
            if (p == 1)
                break;
        }
    
}
void menu()
{
    printf("*******************************\n");
    printf("*****  1. play  0. exit   *****\n");
    printf("*******************************\n");
}
void text()
{
    int input = 0;
    do
    
    {printf("扫雷\n");     
        menu();
        printf("请选择:>");
        scanf_s("%d", &input);
        system("cls");
        switch (input)
        {
        case 1:
            printf("游戏开始\n");
            game();
            break;
        case 0:
            printf("退出游戏\n");
            break;
        default :
            printf("输入非法，请重输！\n");
            break;
        }

    } while (input);
}
int main()
{
    srand((unsigned int)time(NULL));
    text();
}
